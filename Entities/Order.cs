//------------------------------------------------------------------------------
// <auto-generated>
//     Этот код создан по шаблону.
//
//     Изменения, вносимые в этот файл вручную, могут привести к непредвиденной работе приложения.
//     Изменения, вносимые в этот файл вручную, будут перезаписаны при повторном создании кода.
// </auto-generated>
//------------------------------------------------------------------------------

namespace _41_размер.Entities
{
    using System;
    using System.Linq;
    using System.Collections.Generic;

    public partial class Order
    {
        [System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Usage", "CA2214:DoNotCallOverridableMethodsInConstructors")]
        public Order()
        {
            this.OrderProducts = new HashSet<OrderProduct>();
        }

        public int OrderID { get; set; }
        public Nullable<int> ConsumerId { get; set; }
        public int TakeCode { get; set; }
        public int OrderStatus { get; set; }
        public System.DateTime OrderBeginDate { get; set; }
        public System.DateTime OrderDeliveryDate { get; set; }
        public int OrderPickupPointId { get; set; }

        public virtual User User { get; set; }
        public virtual OrderPickupPoint OrderPickupPoint { get; set; }
        public virtual Status Status { get; set; }
        [System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Usage", "CA2227:CollectionPropertiesShouldBeReadOnly")]
        public virtual ICollection<OrderProduct> OrderProducts { get; set; }

        /// <summary>
        /// Свойство-обертка для полной стоимости заказа.
        /// </summary>
        public Decimal FinalCost
        {
            get
            {
                return OrderProducts.Sum(p => p.Product.FinalCost * p.CountInOrder);
            }
        }

        /// <summary>
        /// Свойство-обертка для полной скидки заказа (с символом '%').
        /// </summary>
        public String FinalDiscount
        {
            get
            {
                Decimal discountValue;

                try
                {
                    discountValue = Math.Round((FinalCost / OrderProducts.Sum(p => p.Product.ProductCost * p.CountInOrder)) * 100, 2);
                }

                catch
                {
                    discountValue = 0;
                }

                return $"{100M - discountValue}%";
            }
        }

        /// <summary>
        /// Свойство-обертка для привязки полного списка всех товаров в заказе.
        /// </summary>
        public String AllProductsInOrderAsString
        {
            get
            {
                String allProductsInString = String.Empty;
                allProductsInString = String.Join(", ", OrderProducts.Select(op => op.Product.ProductName));

                return allProductsInString;
            }
        }
    }
}
