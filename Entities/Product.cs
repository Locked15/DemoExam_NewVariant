//------------------------------------------------------------------------------
// <auto-generated>
//     Этот код создан по шаблону.
//
//     Изменения, вносимые в этот файл вручную, могут привести к непредвиденной работе приложения.
//     Изменения, вносимые в этот файл вручную, будут перезаписаны при повторном создании кода.
// </auto-generated>
//------------------------------------------------------------------------------

namespace _41_размер.Entities
{
    using System;
    using System.Collections.Generic;
    using _41_размер.Resources;

    public partial class Product : ICloneable
    {
        [System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Usage", "CA2214:DoNotCallOverridableMethodsInConstructors")]
        public Product()
        {
            this.OrderProducts = new HashSet<OrderProduct>();
        }

        public string ProductArticleNumber { get; set; }
        public string ProductName { get; set; }
        public string ProductUnit { get; set; }
        public string ProductDescription { get; set; }
        public string ProductCategory { get; set; }
        public string ProductPhoto { get; set; }
        public int ProductManufacturerId { get; set; }
        public int ProductDeliver { get; set; }
        public decimal ProductCost { get; set; }
        public Nullable<byte> ProductDiscountAmount { get; set; }
        public int ProductQuantityInStock { get; set; }
        public byte ProductMaxDiscount { get; set; }

        public virtual Company Company { get; set; }
        public virtual Company Company1 { get; set; }
        [System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Usage", "CA2227:CollectionPropertiesShouldBeReadOnly")]
        public virtual ICollection<OrderProduct> OrderProducts { get; set; }

        /// <summary>
        /// Создает копию объекта, выделяя новую память.
        /// </summary>
        /// <returns>Копия объекта.</returns>
        public Object Clone()
        {
            Product newProduct = new Product()
            {
                ProductArticleNumber = ProductArticleNumber,
                ProductName = ProductName,
                ProductUnit = ProductUnit,
                ProductDescription = ProductDescription,
                ProductCategory = ProductCategory,
                ProductPhoto = ProductPhoto,
                ProductManufacturerId = ProductManufacturerId,
                ProductDeliver = ProductDeliver,
                ProductCost = ProductCost,
                ProductDiscountAmount = ProductDiscountAmount,
                ProductQuantityInStock = ProductQuantityInStock,
                ProductMaxDiscount = ProductMaxDiscount,
                Company = Company,
                Company1 = Company1
            };

            return newProduct;
        }

        /// <summary>
        /// Выполняет слияние указанного продукта и текущего экземпляра.
        /// </summary>
        /// <param name="mergeObject">Объект, который будет объединен с текущим.</param>
        public void Merge(Product mergeObject)
        {
            ProductArticleNumber = mergeObject.ProductArticleNumber;
            ProductName = mergeObject.ProductName;
            ProductUnit = mergeObject.ProductUnit;
            ProductDescription = mergeObject.ProductDescription;
            ProductCategory = mergeObject.ProductCategory;
            ProductPhoto = mergeObject.ProductPhoto;
            ProductManufacturerId = mergeObject.ProductManufacturerId;
            ProductDeliver = mergeObject.ProductDeliver;
            ProductCost = mergeObject.ProductCost;
            ProductDiscountAmount = mergeObject.ProductDiscountAmount;
            ProductQuantityInStock = mergeObject.ProductQuantityInStock;
            ProductMaxDiscount = mergeObject.ProductMaxDiscount;
            Company = mergeObject.Company;
            Company1 = mergeObject.Company1;
        }

        /// <summary>
        /// Свойство-обертка над методом расчёта итоговой цены.
        /// <br/>
        /// Позволяет легко привязать компоненты ко стоимости со скидкой, без использования конвертера.
        /// </summary>
        public Decimal FinalCost
        {
            get
            {
                return ProductCost - CalculateDiscountValue();
            }
        }

        /// <summary>
        /// Рассчитывает точную скидку (не в процентах).
        /// </summary>
        /// <returns>Точная скидка.</returns>
        private Decimal CalculateDiscountValue()
        {
            Decimal? result = ProductCost * Convert.ToDecimal((ProductDiscountAmount * 1.0 / 100));

            return result.HasValue ? result.Value : 0;
        }

        /// <summary>
        /// Свойство-обертка для получения абсолютного пути к изображению продукта.
        /// </summary>
        public String ProductFullPhotoPath 
        { 
            get
            {
                return ResourceManager.GetSafeImagePath(ProductPhoto);
            }
        }
    }
}
